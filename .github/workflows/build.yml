name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

env:
  PROJECT_NAME: claudewarp
  PYTHON_VERSION: '3.11'

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ env.PYTHON_VERSION }}
    
  #   - name: Install uv
  #     uses: astral-sh/setup-uv@v4
  #     with:
  #       version: "latest"
    
  #   - name: Install dependencies
  #     run: |
  #       echo "📦 Installing dependencies with uv..."
  #       uv sync --all-groups --all-extras
  #       echo "✅ Dependencies installed successfully"
    
  #   - name: Run tests
  #     run: |
  #       echo "🧪 Running tests..."
  #       uv run pytest tests/ -v --cov=claudewarp --cov-report=xml
  #       echo "✅ Tests completed"
    
  #   - name: Upload coverage
  #     uses: codecov/codecov-action@v3
  #     if: success()
  #     with:
  #       file: ./coverage.xml

  build:
    # needs: test
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos
            arch: arm64
          - os: macos-13
            platform: macos
            arch: x64
          - os: windows-latest
            platform: windows
            arch: x64
          # 可选：添加Linux支持
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: x64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install system dependencies (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "🍎 Setting up macOS dependencies..."
        # macOS特定依赖
        brew install create-dmg
        echo "✅ macOS dependencies installed"
    
    - name: Install system dependencies (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Write-Output "🪟 Setting up Windows dependencies..."
        # Windows特定依赖（如需要）
        Write-Output "Windows build setup complete"
    
    - name: Install Python dependencies (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "📦 Installing Python dependencies with uv..."
        echo "UV version: $(uv --version)"
        uv sync --all-groups --all-extras
        echo "✅ Dependencies installed successfully"
    
    - name: Install Python dependencies (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Write-Output "📦 Installing Python dependencies with uv..."
        Write-Output "UV version: $(uv --version)"
        uv sync --all-groups --all-extras
        Write-Output "✅ Dependencies installed successfully"
    
    - name: Build with PyInstaller (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Write-Output "🔨 Building Windows application with PyInstaller..."
        Write-Output "Platform: ${{ matrix.platform }}-${{ matrix.arch }}"
        Write-Output "Python version: $(uv run python --version)"
        
        # Run the Windows build script
        .\scripts\build_pyinstaller.ps1
    
    - name: Build with PyInstaller (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "🍎 Building macOS application with PyInstaller..."
        echo "Platform: ${{ matrix.platform }}-${{ matrix.arch }}"
        echo "macOS version: $(sw_vers -productVersion)"
        echo "Architecture: $(uname -m)"
        echo "Python version: $(uv run python --version)"
        
        # Run the Unix build script
        bash scripts/build_pyinstaller.sh
    
    - name: Create DMG (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "💿 Creating DMG package for macOS..."
        if [ -d "dist/ClaudeWarp.app" ]; then
          echo "✅ ClaudeWarp.app found, creating DMG..."
          
          # Determine DMG name based on version
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=$(echo "$GITHUB_REF" | sed 's/refs\/tags\/v\?//')
            DMG_NAME="ClaudeWarp-$VERSION-macos-${{ matrix.arch }}.dmg"
          else
            DMG_NAME="ClaudeWarp-macos-${{ matrix.arch }}.dmg"
          fi
          
          # Create a temporary directory for DMG creation
          mkdir -p dmg-temp
          cp -R dist/ClaudeWarp.app dmg-temp/
          
          # Create DMG with create-dmg
          create-dmg \
            --volname "ClaudeWarp" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "ClaudeWarp.app" 175 120 \
            --hide-extension "ClaudeWarp.app" \
            --app-drop-link 425 120 \
            --no-internet-enable \
            "$DMG_NAME" \
            "dmg-temp" || echo "❌ DMG creation failed, will use ZIP instead"
          
          # Clean up temporary directory
          rm -rf dmg-temp
          
          if [ -f "$DMG_NAME" ]; then
            echo "✅ DMG created successfully: $DMG_NAME"
            ls -la "$DMG_NAME"
          else
            echo "⚠️ DMG creation failed, ZIP package will be available"
          fi
        else
          echo "❌ ClaudeWarp.app not found!"
          ls -la dist/
        fi
    
    - name: Create release packages (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "📦 Creating release packages..."
        
        # macOS packages
        if [ -d "dist/ClaudeWarp.app" ]; then
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=$(echo "$GITHUB_REF" | sed 's/refs\/tags\/v\?//')
            ZIP_NAME="ClaudeWarp-$VERSION-macos-${{ matrix.arch }}.zip"
          else
            ZIP_NAME="ClaudeWarp-macos-${{ matrix.arch }}.zip"
          fi
          
          # Create ZIP
          cd dist && zip -r "../$ZIP_NAME" ClaudeWarp.app && cd ..
          echo "✅ macOS ZIP package created: $ZIP_NAME"
          
          # List all created packages
          ls -la *.zip *.dmg 2>/dev/null || ls -la *.zip
        else
          echo "❌ ClaudeWarp.app not found!"
        fi
    
    - name: Create release packages (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Write-Output "📦 Creating Windows release packages..."
        
        # The PowerShell script already created a ZIP, but we need to rename it for versioning
        if (Test-Path "dist\claudewarp.exe") {
          if ($env:GITHUB_REF -like "refs/tags/*") {
            if ($env:GITHUB_REF -like "refs/tags/v*") {
              $version = $env:GITHUB_REF -replace "refs/tags/v", ""
            } else {
              $version = $env:GITHUB_REF -replace "refs/tags/", ""
            }
            $newZipName = "ClaudeWarp-$version-windows-${{ matrix.arch }}.zip"
          } else {
            $newZipName = "ClaudeWarp-windows-${{ matrix.arch }}.zip"
          }
          
          # Find the ZIP created by the build script
          $buildZip = Get-ChildItem -Name "ClaudeWarp-Windows-*.zip" | Select-Object -First 1
          if ($buildZip) {
            # Rename to standardized format
            Move-Item $buildZip $newZipName
            Write-Output "✅ Windows ZIP package renamed to: $newZipName"
          } else {
            # Fallback: create new ZIP if build script didn't create one
            Compress-Archive -Path "dist\claudewarp.exe" -DestinationPath $newZipName
            Write-Output "✅ Windows ZIP package created: $newZipName"
          }
          Get-ChildItem *.zip
        } else {
          Write-Output "❌ claudewarp.exe not found!"
        }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          *.zip
          *.dmg
          dist/
        retention-days: 30
    
    - name: Debug - List all files (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Write-Output "📋 All files in current directory:"
        Get-ChildItem
        Write-Output "📁 Checking for build artifacts:"
        Get-ChildItem -Recurse -Include "*.zip","*.exe","dist" | Select-Object -First 20
    
    - name: Debug - List all files (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "📋 All files in current directory:"
        ls -la
        echo "📁 Checking for build artifacts:"
        find . -name "*.zip" -o -name "*.dmg" -o -name "dist" | head -20
    
    - name: Get version (Unix)
      if: startsWith(github.ref, 'refs/tags/') && matrix.platform == 'macos'
      id: version-unix
      run: |
        # Extract version from tag (handles both v1.0.0 and 1.0.0 formats)
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION="${{ github.ref }}"
          VERSION="${VERSION#refs/tags/v}"
        else
          VERSION="${{ github.ref }}"
          VERSION="${VERSION#refs/tags/}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Get version (Windows)
      if: startsWith(github.ref, 'refs/tags/') && matrix.platform == 'windows'
      id: version-windows
      shell: pwsh
      run: |
        # Extract version from tag (handles both v1.0.0 and 1.0.0 formats)
        $ref = "${{ github.ref }}"
        if ($ref -like "refs/tags/v*") {
          $version = $ref -replace "refs/tags/v", ""
        } else {
          $version = $ref -replace "refs/tags/", ""
        }
        Write-Output "VERSION=$version" >> $env:GITHUB_OUTPUT
        Write-Output "Extracted version: $version"
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: ClaudeWarp v${{ steps.version-unix.outputs.VERSION || steps.version-windows.outputs.VERSION }}
        body: |
          ## ClaudeWarp v${{ steps.version-unix.outputs.VERSION || steps.version-windows.outputs.VERSION }}
          
          ### 下载
          
          - **macOS Intel**: `ClaudeWarp-${{ steps.version-unix.outputs.VERSION || steps.version-windows.outputs.VERSION }}-macos-x64.zip` 或 `.dmg`
          - **macOS Apple Silicon**: `ClaudeWarp-${{ steps.version-unix.outputs.VERSION || steps.version-windows.outputs.VERSION }}-macos-arm64.zip` 或 `.dmg`
          - **Windows**: `ClaudeWarp-${{ steps.version-unix.outputs.VERSION || steps.version-windows.outputs.VERSION }}-windows-x64.zip`
          
          ### 安装说明
          
          #### macOS
          1. 下载 `.dmg` 文件或 `.zip` 压缩包
          2. 如果是 `.dmg`：双击打开，拖拽 ClaudeWarp.app 到应用程序文件夹
          3. 如果是 `.zip`：解压后将 ClaudeWarp.app 移动到应用程序文件夹
          4. 首次运行可能需要在系统偏好设置中允许运行
          
          #### Windows
          1. 下载 `.zip` 压缩包
          2. 解压得到 `claudewarp.exe`
          3. 运行 `claudewarp.exe`
          
          ### 变更日志
          
          请查看 [CHANGELOG.md](CHANGELOG.md) 了解详细变更内容。
        files: |
          *.zip
          *.dmg
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build Status
      run: |
        echo "📊 Build Summary:"
        # echo "Test result: ${{ needs.test.result }}"
        echo "Build result: ${{ needs.build.result }}"
        
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ All builds completed successfully!"
        else
          echo "❌ Build failed!"
          # echo "Test status: ${{ needs.test.result }}"
          echo "Build status: ${{ needs.build.result }}"
          exit 1
        fi