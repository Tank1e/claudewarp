name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  PROJECT_NAME: claudewarp
  PYTHON_VERSION: "3.11"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos
            arch: arm64
          - os: macos-13
            platform: macos
            arch: x64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python & UV
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Setup Nu shell
        uses: hustcer/setup-nu@v3
        with:
          version: "0.99"

      - name: Install platform dependencies
        shell: nu {0}
        run: |
          let platform = "${{ matrix.platform }}"
          match $platform {
            "macos" => {
              print "üçé Setting up macOS..."
              ^brew update
              ^brew install create-dmg
            }
            "linux" => {
              print "üêß Setting up Linux..."
              ^sudo apt-get update
              ^sudo apt-get install -y libqt6gui6 libqt6widgets6 libqt6core6 qt6-base-dev libxcb-xinerama0 libxcb-cursor0 libgl1-mesa-dev libegl1 libfontconfig1 libglib2.0-0 libgtk-3-0 libx11-xcb1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0
              ^wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
              ^chmod +x appimagetool-x86_64.AppImage
              ^sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool
            }
            "windows" => {
              print "ü™ü Setting up Windows..."
              # Windows ÈÄöÂ∏∏‰∏çÈúÄË¶ÅÈ¢ùÂ§ñ‰æùËµñ
            }
          }

      - name: Install Python dependencies
        run: |
          echo "üì¶ Installing dependencies with uv..."
          uv sync --all-groups --all-extras
          echo "‚úÖ Dependencies installed"

      - name: Build application
        shell: nu {0}
        run: |
          let platform = "${{ matrix.platform }}"
          let arch = "${{ matrix.arch }}"
          print $"üî® Building ($platform)-($arch)..."

          match $platform {
            "windows" => {
              ^pwsh ./scripts/build_pyinstaller.ps1
            }
            _ => {
              $env.PYTHONOPTIMIZE = "2"
              $env.PYTHONDONTWRITEBYTECODE = "1"
              ^bash scripts/build_pyinstaller.sh
            }
          }

      - name: Create packages
        shell: nu {0}
        run: |
          # Get version from tag
          let version = if ("${{ github.ref }}" | str starts-with "refs/tags/") {
            "${{ github.ref }}" | str replace "refs/tags/" "" | str replace "v" ""
          } else {
            "dev"
          }

          let platform = "${{ matrix.platform }}"
          let arch = "${{ matrix.arch }}"

          match $platform {
            "macos" => {
              print "üíø Creating macOS packages..."
              if ("dist/ClaudeWarp.app" | path exists) {
                # Create ZIP
                let zip_name = $"ClaudeWarp-($version)-macos-($arch).zip"
                cd dist
                ^zip -r $"../($zip_name)" ClaudeWarp.app
                cd ..
                
                # Create DMG
                let dmg_name = $"ClaudeWarp-($version)-macos-($arch).dmg"
                ^mkdir -p dmg-temp
                ^cp -R dist/ClaudeWarp.app dmg-temp/
                try {
                  ^create-dmg --volname "ClaudeWarp" --window-pos 200 120 --window-size 600 300 --icon-size 100 --icon "ClaudeWarp.app" 175 120 --hide-extension "ClaudeWarp.app" --app-drop-link 425 120 --no-internet-enable $dmg_name "dmg-temp"
                } catch {
                  print "‚ö†Ô∏è DMG creation failed, but ZIP is available"
                }
                ^rm -rf dmg-temp
                print "‚úÖ macOS packages created"
              }
            }
            "windows" => {
              print "ü™ü Creating Windows package..."
              if ("dist/claudewarp.exe" | path exists) {
                let zip_name = $"ClaudeWarp-($version)-windows-($arch).zip"
                cd dist
                ^powershell -c $"Compress-Archive -Path claudewarp.exe -DestinationPath ../($zip_name)"
                cd ..
                print "‚úÖ Windows package created"
              }
            }
            "linux" => {
              print "üêß Creating Linux packages..."
              if ("dist/claudewarp" | path exists) {
                # Create ZIP
                let zip_name = $"ClaudeWarp-($version)-linux-($arch).zip"
                ^mkdir -p linux-package
                ^cp dist/claudewarp linux-package/
                if ("README.md" | path exists) { ^cp README.md linux-package/ }
                if ("LICENSE" | path exists) { ^cp LICENSE linux-package/ }
                cd linux-package
                ^zip -r $"../($zip_name)" *
                cd ..
                ^rm -rf linux-package
                
                # Create AppImage
                let appimage_name = $"ClaudeWarp-($version)-linux-($arch).AppImage"
                ^mkdir -p ClaudeWarp.AppDir/usr/bin ClaudeWarp.AppDir/usr/share/applications
                ^cp dist/claudewarp ClaudeWarp.AppDir/usr/bin/
                
                # Copy desktop file template
                ^cp .github/templates/appimage/claudewarp.desktop ClaudeWarp.AppDir/claudewarp.desktop
                ^cp .github/templates/appimage/claudewarp.desktop ClaudeWarp.AppDir/usr/share/applications/
                ^touch ClaudeWarp.AppDir/claudewarp.png
                
                # Copy AppRun template
                ^cp .github/templates/appimage/AppRun ClaudeWarp.AppDir/AppRun
                ^chmod +x ClaudeWarp.AppDir/AppRun
                try {
                  ^appimagetool ClaudeWarp.AppDir $appimage_name
                } catch {
                  print "‚ö†Ô∏è AppImage creation failed, but ZIP is available"
                }
                ^rm -rf ClaudeWarp.AppDir
                print "‚úÖ Linux packages created"
              }
            }
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            *.zip
            *.dmg
            *.AppImage
            dist/
          retention-days: 30

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Nu shell
        uses: hustcer/setup-nu@v3
        with:
          version: "0.99"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Create Release
        shell: nu {0}
        run: |
          let version = "${{ github.ref }}" | str replace "refs/tags/" "" | str replace "v" ""
          print $"Creating release for version ($version)"

          # Create release with GitHub CLI
          let release_body = (open .github/templates/github/release_notes.md | str replace '{VERSION}' $version)
          ^gh release create $"v($version)" --title $"ClaudeWarp v($version)" --notes $release_body --draft=false
          
          # Find and upload all build artifacts
          cd artifacts
          let asset_files = (ls **/*.{zip,dmg,AppImage} | get name)
          if ($asset_files | length) > 0 {
            print $"Found ($asset_files | length) assets to upload"
            for file in $asset_files {
              print $"Uploading: ($file)"
              ^gh release upload $"v($version)" $file
            }
          } else {
            print "‚ö†Ô∏è No assets found to upload"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Build Status
        run: |
          echo "üìä Build Summary:"
          echo "Build result: ${{ needs.build.result }}"

          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "‚úÖ All builds completed successfully!"
          else
            echo "‚ùå Build failed!"
            echo "Build status: ${{ needs.build.result }}"
            exit 1
          fi
